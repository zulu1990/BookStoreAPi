// <auto-generated />
using System;
using BookStoreAPi.DAL.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BookStoreAPi.DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20211127210528_initialized")]
    partial class initialized
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BookStoreApi.Contracts.Entity.Book", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("BookIdentifier")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("CartId")
                        .HasColumnType("bigint");

                    b.Property<string>("Genre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Locked")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("PurchaseHistoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("PurchaseHistoryId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("BookStoreApi.Contracts.Entity.Cart", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("BookStoreApi.Contracts.Entity.PurchaseHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("PurchaseHistory");
                });

            modelBuilder.Entity("BookStoreApi.Contracts.Entity.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BookStoreApi.Contracts.Entity.Book", b =>
                {
                    b.HasOne("BookStoreApi.Contracts.Entity.Cart", "Cart")
                        .WithMany("Books")
                        .HasForeignKey("CartId");

                    b.HasOne("BookStoreApi.Contracts.Entity.PurchaseHistory", "PurchaseHistory")
                        .WithMany("Books")
                        .HasForeignKey("PurchaseHistoryId");

                    b.Navigation("Cart");

                    b.Navigation("PurchaseHistory");
                });

            modelBuilder.Entity("BookStoreApi.Contracts.Entity.Cart", b =>
                {
                    b.HasOne("BookStoreApi.Contracts.Entity.User", "User")
                        .WithOne("Cart")
                        .HasForeignKey("BookStoreApi.Contracts.Entity.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookStoreApi.Contracts.Entity.PurchaseHistory", b =>
                {
                    b.HasOne("BookStoreApi.Contracts.Entity.User", "User")
                        .WithOne("PurchaseHistory")
                        .HasForeignKey("BookStoreApi.Contracts.Entity.PurchaseHistory", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookStoreApi.Contracts.Entity.Cart", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BookStoreApi.Contracts.Entity.PurchaseHistory", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BookStoreApi.Contracts.Entity.User", b =>
                {
                    b.Navigation("Cart");

                    b.Navigation("PurchaseHistory");
                });
#pragma warning restore 612, 618
        }
    }
}
